# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col, '| Overall'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set and print working directory ####
setwd('C:/Users/jeanl/projects/bar-plots')
getwd()
# Load data; we define all strings as factors ####
df <- read.csv('data.csv', stringsAsFactors = TRUE)
# Function to generate basic bar plots ####
library(tidyverse)
library(ggplot2)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set and print working directory ####
setwd('C:/Users/jeanl/projects/bar-plots')
getwd()
# Load data; we define all strings as factors ####
df <- read.csv('data.csv', stringsAsFactors = TRUE)
# Function to generate basic bar plots ####
library(tidyverse)
library(ggplot2)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.jpg'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set and print working directory ####
setwd('C:/Users/jeanl/projects/bar-plots')
getwd()
# Load data; we define all strings as factors ####
df <- read.csv('data.csv', stringsAsFactors = TRUE)
# Function to generate basic bar plots ####
library(tidyverse)
library(ggplot2)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = '#00A2A5')
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# Set iteration counter to 0. This is needed only for numbering the output .png
# plots. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){ # fun start
for (col in colnames(df)){ # for-loop start
# (1) Some variables we'll need ###########################################
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Update counter; needed for plot numbering
counter <- counter + 1
# (2) UNORDERED FACTORS ###################################################
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if-else start
# We remove NA here; also note we use sym(), needed mainly to reorder the
# bars in a loop; also note, fct_rev() is necessary to revert fct_infreq()
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = 'black') #00A2A5
# Aesthetics
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates; note, this is needed only to accommodate the percent an-
# notation, in combination with plot.margin(); without annotations, we might
# have simply reversed x and y everywhere to get exact same result
p <- p + coord_flip(clip = 'off')
# Print
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm') # initially *1.3
}
} # for-loop end
} # fun end
# Implement on full data
make_bar_plots(df)
# We create a counter. This needs to be an external variable.
counter <- 0
# We create a counter. This needs to be an external variable.
counter <- 0
# Function
make_bar_plots <- function(df){
for (col in colnames(df)){
# (1) Preparation #########################################################
# Store N
N <- sum(!is.na(df[col]))
# Update counter at each iteration
counter <- counter + 1
# (2) Basic bar plot ######################################################
if (is.factor(df[[col]])) {
p <- ggplot(data = df[col] %>% filter(!is.na(df[col])),
aes(x=fct_rev(fct_infreq(!!sym(col)))))
# Compute percents for bars
p <- p + geom_bar(aes(y = (..count..)/sum(..count..)), width = 0.55,
fill = 'black')
# (3) Annotations #########################################################
# Add N as annotations
p <- p + geom_text(aes(label= scales::comma(..count..), y = ((..count..)/sum(..count..)), family = 'Roboto'),
stat="count",
hjust = 1.2, size=4.2, color='white')
# Add percents as annotations; note, rounding percents using round() be-
# haves oddly, and it is much better to use accuracy = 0.1L
p <- p + geom_text(aes(label = scales::percent((..count..)/sum(..count..),
accuracy = 0.1L),
y = ((..count..)/sum(..count..)), family = 'Roboto'), stat="count",
hjust = -0.1, size=4.2)
p <- p + labs(title = paste(col),
subtitle = paste0('N = ', format(N, big.mark = ',')
))
# (4) Aesthetics ##########################################################
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12.5),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16.5),
plot.subtitle = element_text(size = 12.5),
panel.grid = element_blank(),
text = element_text(family = 'Roboto'))
# Flip coordinates
p <- p + coord_flip(clip = 'off')
# (5) Print and export   #################################################
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/',
width = 16.5,
height = 5, units = 'cm')
}
}
}
# Implement on full data
make_bar_plots(df)
